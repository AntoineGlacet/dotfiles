# === Powerlevel10k Instant Prompt (keep at top) ===
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

# === Locale fix ===
export LANG=C.UTF-8
export LC_ALL=C.UTF-8

# === Path ===
export PATH="$HOME/bin:/usr/local/bin:$PATH"

# === Zinit setup ===
ZINIT_ROOT="${XDG_DATA_HOME:-$HOME/.local/share}/zinit"
ZINIT_HOME="$ZINIT_ROOT/zinit.git"
if [[ ! -f "$ZINIT_HOME/zinit.zsh" ]]; then
  print -P "%F{33}Installing zinit...%f" >&2
  command mkdir -p "$ZINIT_ROOT"
  if command -v git >/dev/null 2>&1; then
    if ! command git clone https://github.com/zdharma-continuum/zinit.git "$ZINIT_HOME" >&2; then
      print -P "%F{196}Unable to clone zinit – falling back to a basic prompt.%f" >&2
    fi
  else
    print -P "%F{196}git is unavailable – skipping automatic zinit installation.%f" >&2
  fi
fi

if [[ -f "$ZINIT_HOME/zinit.zsh" ]]; then
  source "$ZINIT_HOME/zinit.zsh"
else
  print -P "%F{196}zinit not found at $ZINIT_HOME – plugins will be skipped.%f" >&2
fi

# === Completion cache ===
ZSH_CACHE_DIR="${XDG_CACHE_HOME:-$HOME/.cache}/zsh"
mkdir -p "$ZSH_CACHE_DIR" "$ZSH_CACHE_DIR/completions"
export ZSH_COMPDUMP="$ZSH_CACHE_DIR/zcompdump"
autoload -Uz compinit
compinit -u -d "$ZSH_COMPDUMP"
zstyle ':completion:*' use-cache on
zstyle ':completion:*' cache-path "$ZSH_CACHE_DIR/completions"

# === Shell options ===
setopt autocd
autoload -Uz colors && colors
setopt interactivecomments
setopt promptsubst

# === Plugins & Theme ===
export ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE="fg=242"
export ZSH_AUTOSUGGEST_STRATEGY=(history completion)

if typeset -f zinit >/dev/null 2>&1; then
  zinit ice depth=1
  zinit light romkatv/powerlevel10k

  zinit light zsh-users/zsh-autosuggestions

  zinit ice wait"1" lucid
  zinit light zsh-users/zsh-syntax-highlighting

  zinit snippet OMZP::golang
  zinit snippet OMZP::z
else
  PROMPT="%F{cyan}%n@%m%f %1~ %# "
fi

# === Language / Editor ===
export EDITOR="nvim"

# === User Config ===
[[ -f ~/.shell/env ]] && source ~/.shell/env
[[ -f ~/.shell/aliases ]] && source ~/.shell/aliases
[[ -f ~/.shell/keybindings ]] && source ~/.shell/keybindings

# === Direnv Hook ===
if command -v direnv >/dev/null 2>&1; then
  _direnv_hook() { eval "$(direnv export zsh)"; }
  typeset -ag precmd_functions
  if [[ -z ${precmd_functions[(r)_direnv_hook]} ]]; then
    precmd_functions+=_direnv_hook
  fi
fi

# === Powerlevel10k Config ===
[[ -f ~/.p10k.zsh ]] && source ~/.p10k.zsh

# === Node Version Manager (nvm) ===
export NVM_DIR="$HOME/.nvm"
[[ -s "$NVM_DIR/nvm.sh" ]] && source "$NVM_DIR/nvm.sh"
[[ -s "$NVM_DIR/bash_completion" ]] && source "$NVM_DIR/bash_completion"

# === pnpm ===
export PNPM_HOME="$HOME/.local/share/pnpm"
case ":$PATH:" in
  *":$PNPM_HOME:"*) ;;
  *) export PATH="$PNPM_HOME:$PATH" ;;
esac

# === pyenv ===
export PATH="$HOME/.pyenv/bin:$PATH"
eval "$(pyenv init -)"
eval "$(pyenv virtualenv-init -)"
