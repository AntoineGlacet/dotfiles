# === Powerlevel10k Instant Prompt (keep at top) ===
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

# === Locale fix ===
export LANG=C.UTF-8
export LC_ALL=C.UTF-8

# === Path ===
export PATH="$HOME/bin:/usr/local/bin:$PATH"

# === Zinit bootstrap ===
ZINIT_HOME="${XDG_DATA_HOME:-$HOME/.local/share}/zinit"
ZINIT_MAIN="$ZINIT_HOME/zinit.git/zinit.zsh"
if [[ ! -f "$ZINIT_MAIN" ]]; then
  mkdir -p "$ZINIT_HOME"
  if command -v git >/dev/null 2>&1; then
    git clone https://github.com/zdharma-continuum/zinit.git "$ZINIT_HOME/zinit.git"
  else
    echo "[WARN] git is required to install zinit" >&2
  fi
fi

# === History ===
export HISTFILE="$HOME/.zsh_history"
export HISTSIZE=50000
export SAVEHIST=50000
setopt SHARE_HISTORY INC_APPEND_HISTORY EXTENDED_HISTORY HIST_IGNORE_ALL_DUPS HIST_IGNORE_SPACE

# === Completion caching ===
ZSH_CACHE_DIR="${XDG_CACHE_HOME:-$HOME/.cache}/zsh"
mkdir -p "$ZSH_CACHE_DIR/completions"
zstyle ':completion:*' use-cache yes
zstyle ':completion:*' cache-path "$ZSH_CACHE_DIR/completions"
autoload -Uz compinit

# === Plugin configuration ===
export ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE="fg=242"
export ZSH_AUTOSUGGEST_STRATEGY=(history completion)

if [[ -f "$ZINIT_MAIN" ]]; then
  source "$ZINIT_MAIN"

  zinit snippet OMZP::golang
  zinit snippet OMZP::z
  zinit light romkatv/powerlevel10k
  zinit light zsh-users/zsh-autosuggestions
  zinit light zsh-users/zsh-history-substring-search
  zinit light zsh-users/zsh-syntax-highlighting
else
  echo "[WARN] zinit not available; skipping plugin setup" >&2
fi

if [[ -f "$ZSH_CACHE_DIR/zcompdump" ]]; then
  compinit -C -d "$ZSH_CACHE_DIR/zcompdump"
else
  compinit -d "$ZSH_CACHE_DIR/zcompdump"
fi

# === Language / Editor ===
export EDITOR="nvim"

# === User Config ===
[[ -f ~/.shell/env ]] && source ~/.shell/env
[[ -f ~/.shell/aliases ]] && source ~/.shell/aliases
[[ -f ~/.shell/keybindings ]] && source ~/.shell/keybindings

# === Direnv Hook ===
if command -v direnv >/dev/null 2>&1; then
  _direnv_hook() { eval "$(direnv export zsh)"; }
  typeset -ag precmd_functions
  if [[ -z ${precmd_functions[(r)_direnv_hook]} ]]; then
    precmd_functions+=_direnv_hook
  fi
fi

# === Powerlevel10k Config ===
[[ -f ~/.p10k.zsh ]] && source ~/.p10k.zsh

# === Node Version Manager (nvm) ===
export NVM_DIR="$HOME/.nvm"
[[ -s "$NVM_DIR/nvm.sh" ]] && source "$NVM_DIR/nvm.sh"
[[ -s "$NVM_DIR/bash_completion" ]] && source "$NVM_DIR/bash_completion"

# === pnpm ===
export PNPM_HOME="$HOME/.local/share/pnpm"
case ":$PATH:" in
  *":$PNPM_HOME:"*) ;;
  *) export PATH="$PNPM_HOME:$PATH" ;;
esac

# === pyenv ===
export PATH="$HOME/.pyenv/bin:$PATH"
eval "$(pyenv init -)"
eval "$(pyenv virtualenv-init -)"
