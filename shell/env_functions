# Usage: indirect_expand PATH -> $PATH
indirect_expand() {
	env | sed -n "s/^$1=//p"
}

# Usage: pathremove /path/to/bin [PATH]
# Eg, to remove ~/bin from $PATH
#     pathremove ~/bin PATH
pathremove() {
	local IFS=':'
	local newpath
	local dir
	local var=${2:-PATH}
	for dir in $(indirect_expand "$var"); do
		IFS=''
		if [ "$dir" != "$1" ]; then
			newpath=$newpath:$dir
		fi
	done
	eval "$var=\${newpath#:}"
	export "$var"
}

# Usage: pathprepend /path/to/bin [PATH]
# Eg, to prepend ~/bin to $PATH
#     pathprepend ~/bin PATH
pathprepend() {
	# if the path is already in the variable,
	# remove it so we can move it to the front
	pathremove "${1}" "${2}"
	local var="${2:-PATH}"
	local value
	value=$(indirect_expand "$var")
	eval "$var=\${1}\${value:+:${value}}"
	export "$var"
}

# Usage: pathappend /path/to/bin [PATH]
# Eg, to append ~/bin to $PATH
#     pathappend ~/bin PATH
pathappend() {
	pathremove "${1}" "${2}"
	local var=${2:-PATH}
	local value
	value=$(indirect_expand "$var")
	eval "$var=\${value:+${value}:}\${1}"
	export "$var"
}

# Usage: ssource filename
ssource() {
	[[ -r "$1" ]] && . "$1"
}

# List all tmux panes.
# Output is
# <session_name>#<window_index>.<pane_index> <window_name>
#   <pstree of pane>
tmuxls() {
	while read -r pane; do
		IFS="|" read PANE_ID PANE_INDEX WINDOW_INDEX SESSION_NAME WINDOW_NAME <<<"$pane"
		echo "${SESSION_NAME}#${WINDOW_INDEX}.${PANE_INDEX} ${WINDOW_NAME}"
		pstree -p -a -U "$PANE_ID" | sed 's/^/  /'
		echo "-----"
	done <<<$(tmux list-panes -a -F "#{pane_pid}|#{pane_index}|#{window_index}|#{session_name}|#{window_name}")
}

## KAP proxy functions

# Define proxy settings
proxy_host="192.168.3.16"
proxy_port="8080"
socks_proxy_port="1080"
ssh_config="$HOME/.ssh/config"

# Function to set environment variables and Git proxy
set_proxy_env() {
	export http_proxy="http://$proxy_host:$proxy_port"
	export https_proxy="http://$proxy_host:$proxy_port"
	export ftp_proxy="http://$proxy_host:$proxy_port"
	export no_proxy="localhost,127.0.0.1,.mycompany.com"
	export ALL_PROXY="socks5://$proxy_host:$socks_proxy_port"

	git config --global http.proxy $http_proxy
	git config --global https.proxy $https_proxy
}

# Function to unset environment variables and Git proxy
unset_proxy_env() {
	unset http_proxy
	unset https_proxy
	unset ftp_proxy
	unset no_proxy
	unset ALL_PROXY

	git config --global --unset http.proxy
	git config --global --unset https.proxy
}

# Function to configure SSH proxy
configure_ssh_proxy() {
	local action=$1
	local proxy_config="# Use proxy for all hosts by default
Host *
  ProxyCommand nc -X connect -x $proxy_host:$proxy_port %h %p

# Exclude LAN hosts from using the proxy
Host 192.168.* 10.*.*.* 172.16.*.* 172.31.*.*
  ProxyCommand none"

	if [[ $action == "enable" ]]; then
		if grep -q "ProxyCommand nc -X connect -x $proxy_host:$proxy_port" "$ssh_config"; then
			echo "SSH proxy is already enabled."
		else
			echo "$proxy_config" >>"$ssh_config"
			echo "SSH proxy has been enabled."
		fi
	elif [[ $action == "disable" ]]; then
		if grep -q "ProxyCommand nc -X connect -x $proxy_host:$proxy_port" "$ssh_config"; then
			sed -i.bak "/# Use proxy for all hosts by default/,/ProxyCommand none/d" "$ssh_config"
			echo "SSH proxy has been disabled."
		else
			echo "SSH proxy is not enabled."
		fi
	fi
}

# Function to enable all proxies
enable_proxy() {
	set_proxy_env
	configure_ssh_proxy "enable"
	echo "Proxy has been enabled."
}

# Function to disable all proxies
disable_proxy() {
	unset_proxy_env
	configure_ssh_proxy "disable"
	echo "Proxy has been disabled."
}
